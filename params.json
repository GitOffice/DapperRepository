{"name":"Dapperrepository","tagline":" Dapper Repository","body":"## Welcome to the DapperRepository wiki!\r\n\r\n### This Repository cloning and changed to Drapper ORM micro framework.\r\n\r\n* [Dapper .NET source](https://github.com/elyor0529/dapper-dot-net)\r\n* [Dapper Extensions](https://github.com/elyor0529/Dapper-Extensions)\r\n\r\nAnd I this two libs in changes table , wrote here:\r\n\r\nI fix to this issue list:\r\n\r\n_1. Type Mapping_\r\n_1. Drop table_\r\n_1. Exists table,_\r\n_1. Create table_\r\n_1. DbFactory_\r\n\r\n\r\nDemonstration\r\n\r\nModel:\r\n\r\n **public class TempModel`**\r\n    **`{`**\r\n        **`public TempModel()`**\r\n        **`{`**\r\n            **`LastModifiedDate = DateTime.Now;`**\r\n            **`CreatedDate = DateTime.Now;`**\r\n        **`}`**\r\n\r\n        **`public long ID { get; set; }`**\r\n\r\n        **`public string Version { get; set; }`**\r\n\r\n        **`public string Name { get; set; }`**\r\n\r\n        **`public DateTime CreatedDate { get; set; }`**\r\n\r\n        **`public DateTime LastModifiedDate { get; set; }`**\r\n    **`}`**\r\n\r\n\r\nMapper:\r\n\r\n  **`public class TempModelMapper : ClassMapper<TempModel>`**\r\n    **`{`**\r\n        **`public TempModelMapper()`**\r\n        **`{`**\r\n            **`Table(\"BusinessView\");`**\r\n\r\n            **`Map(f => f.ID).Column(\"Id\").Key(KeyType.Identity);`**\r\n            **`Map(f => f.Version).Column(\"Version\");`**\r\n            **`Map(f => f.Name).Column(\"Name\");`**\r\n            **`Map(f => f.CreatedDate).Column(\"CreatedDate\");`**\r\n            **`Map(f => f.LastModifiedDate).Column(\"LastModifiedDate\");`**\r\n\r\n            **`Schema(\"\");`**\r\n        **`}`**\r\n    **`}`**\r\n\r\nConnection Strings:\r\n\r\n**` <appSettings>`**\r\n    **`<add key=\"ConnectionString\" value=\"Data Source=localhost;Initial Catalog=TempDb;User Id=sa;Password=web@1234\"/>`**\r\n  **`</appSettings>`**\r\n\r\nMigrations:\r\n\r\n**` var connectionString = ConfigurationManager.AppSettings[\"ConnectionString\"];`**\r\n\r\n   **`RepositoryHelper.ConfigureRepository(new SqlServerManager(connectionString));`**\r\n   **`MigrationHelper.Configure<TempModel>();`**\r\n\r\nTest:\r\n\r\n\r\n**`            using (var manager = RepositoryHelper.GetManager())`**\r\n            **`{`**\r\n                **`//exists`**\r\n                **`if (manager.Database.Exists<TempModel>())`**\r\n                **`{`**\r\n                    **`//drop                    `**\r\n                    **`manager.Database.Drop<TempModel>();`**\r\n                **`}`**\r\n\r\n                **`//create`**\r\n                **`manager.Database.Create<TempModel>();`**\r\n\r\n                **`//insert`**\r\n                **`var bv = new TempModel`**\r\n                **`{`**\r\n                    **`Name = \"Aji buji\"`**\r\n                **`};`**\r\n                **`var bvId = manager.Database.Insert(bv);`**\r\n\r\n                **`//get`**\r\n                **`bv = manager.Database.Get<TempModel>(bvId);`**\r\n\r\n                **`//update`**\r\n                **`bv.Name = \"Buji aji\";`**\r\n                **`bv.CreatedDate = DateTime.Now;`**\r\n                **`bv.LastModifiedDate = DateTime.Now;`**\r\n                **`manager.Database.Update(bv);`**\r\n\r\n                **`//delete`**\r\n                **`manager.Database.Delete(bv);`**\r\n\r\n                **`//all `**\r\n                **`var bvs = manager.Database.GetList<TempModel>();`**\r\n                **`foreach (var item in bvs)`**\r\n                    **`Console.WriteLine(item.Name);`**\r\n\r\n                **`//filter`**\r\n                **`var predicate = Predicates.Field<TempModel>(model => model.Name, Operator.Like, \"ji\");`**\r\n                **`bvs = manager.Database.GetList<TempModel>();`**\r\n                **`foreach (var item in bvs)`**\r\n                    **`Console.WriteLine(item.Name);`**\r\n\r\n            **`}`**\r\n","google":"Dapper Repository, Dapper,Repository","note":"Don't delete this file! It's used internally to help with page regeneration."}